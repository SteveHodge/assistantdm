<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!--<meta name="viewport" content="width=480">-->
	<link rel="stylesheet" type="text/css" href="http://static.stevehodge.net/spelllist.css">
	<link rel="stylesheet" type="text/css" href="http://static.stevehodge.net/character.css"/>
	<style>
#tab_webcam table {
	width: 100%;
	border-collapse: collapse;
	border: 1px solid black;
}

#tab_webcam th {
	border: 1px solid black;
}

 #tab_webcam td {
	border: 1px solid black;
}

#tab_webcam th {
	background-color: #c0c0c0;
}
	</style>
	<title>Assistant DM</title>
	<script src="//code.jquery.com/jquery-2.1.1.min.js"></script>
	<script type="text/javascript" src="http://static.stevehodge.net/dialog_box.js" async></script>
	<script src="/assistantdm/static/updater.js"></script>
	<script type="text/javascript" src="http://static.stevehodge.net/spelllist.js" defer></script>
	<script>
// version: 20140707
// TODO inline script means we can't defer jquery

function updateInitiativeText(data) {
	var html = '<table>\n<tr><th>Combat Round</th><th>\n';
	html += (data.round == undefined ? 0 : data.round) + "</th><th>Initiative</th></tr>\n";
	
	$.each(data.order, function(i,entry) {
		html += "<tr><td colspan=2>"+entry.name+"</td>";
		html += "<td>"+entry.initiative+"</td></tr>\n";
	});
	html += "</table>\n";
	$('#initiative').html(html);
}

function updateTokensText(data) {
	var html = '<table>';
	$.each(data, function(i, entry) {
		html += '<tr><td>'+entry.token+'</td><td>'+entry.name+'</td></tr>';
	});
	$('#tokenlist').html(html+'</table>');
}

function logMessage(msg, debug) {
	if (document.getElementById("debugcheck").checked) {
		$('#messageDiv').append((new Date()).toLocaleTimeString()+': '+msg+'<br>');
	} else if (!debug) {
		$('#messageDiv').html((new Date()).toLocaleTimeString()+': '+msg+'<br>');
	}
}

{{#webcam}}
updater.addListener('initiative.json', function() {
	logMessage('updated initiatives');
	$.get('static/initiative.json?'+(new Date()).valueOf(), function(data) {
		updateInitiativeText(data);
	});
});

updater.addListener('camera.jpg', function() {
	document.getElementById("photo1").src = "http://static.stevehodge.net/camera.jpg?"+(new Date()).valueOf();
	logMessage('updated image');
});

updater.addListener('tokens.png', function() {
	document.getElementById("tokens1").src = "http://static.stevehodge.net/tokens.png?"+(new Date()).valueOf();
	logMessage('updated token overlay', true);
});

updater.addListener('tokens.json', function() {
	logMessage('updated token legend', true);
	$.get('static/tokens.json?'+(new Date()).valueOf(), function(data) {
		updateTokensText(data);
	});
});

$(document).ready(function () {
	$.getJSON('static/initiative.json?'+(new Date()).valueOf(), function(data) {
		updateInitiativeText(data);
	});
	
	$.getJSON('static/tokens.json?'+(new Date()).valueOf(), function(data) {
		updateTokensText(data);
	});

	updater.onError = function(state) {
		if (state === EventSource.CLOSED) {
			logMessage('Lost connection to server');
		} else if (state === EventSource.CONNECTING) {
			logMessage('Lost connection to server, attempting reconnect');
		} else {
			logMessage('Lost connection to server, unknown error');
		}
	};

	updater.onOpen = function() {
		logMessage('Connection to server open');
	}
	
	logMessage('Connecting to server');

	updater.openConnection();
});
{{/webcam}}

function toggleTokens() {
	var checked = document.getElementById("tokens1check").checked;
	document.getElementById("tokens1").style.display = checked?"inline":"none";
	document.getElementById("tokenlist").style.display = checked?"inline":"none";
}

function openPhoto() {
	var win=window.open("http://static.stevehodge.net/camera.jpg", '_blank');
	win.focus();
}
	</script>
	<script type="text/javascript">
var xsl;

function displayXML(xml) {
	var div = document.getElementById("tab_sheet");
	// code for IE
	if (window.ActiveXObject) {
		div.innerHTML=xml.transformNode(xsl);
	}
	// code for Mozilla, Firefox, Opera, etc.
	else if (document.implementation && document.implementation.createDocument) {
		xsltProcessor=new XSLTProcessor();
		xsltProcessor.importStylesheet(xsl);
		resultDocument = xsltProcessor.transformToFragment(xml,document);
		while (div.hasChildNodes()) div.removeChild(div.firstChild);
		div.appendChild(resultDocument);
	}
}

{{#sheet1}}
updater.addListener('{{name}}.xml', function() {
	$.get('/assistantdm/{{name}}/xml?unique='+(new Date()).valueOf(), displayXML);
});

$(document).ready(function () {
	WRAPPER = 'tab_sheet';	// set element id for the dialog box to use

	$.get('/assistantdm/static/CharacterTemplate.xsl', function(data) {
		xsl = data;
		$.get('/assistantdm/{{name}}/xml?unique='+(new Date()).valueOf(), displayXML);
	});

	updater.onError = function(state) {
		if (state === EventSource.CLOSED) {
			alert('Lost connection to the server\nNo more updates will occur');
		} else if (state === EventSource.CONNECTING) {
		} else {
			alert('Lost connection to server, unknown error\nNo more updates will occur');
		}
	}

	updater.openConnection();
});
{{/sheet1}}

	</script>
</head>
<body>
	<div id="tabs"></div>

	<div id="tab_content">
		{{#webcam}}
		<section id="tab_webcam" class="tab" name="Webcam">
			<div style="width: 75%; float: left;">
				<img width="75%" id="photo1" src="http://static.stevehodge.net/camera.jpg" style="position:absolute; z-index:1;"/>
				<img width="75%" id="tokens1" src="http://static.stevehodge.net/tokens.png" style="position:absolute; z-index:2;" onclick="openPhoto();"/>
				&nbsp;
			</div>
			<div style="width: 23%; height: 100%; float: right; height: 100%; overflow-y: auto;">
				<div id="initiative">
					<table>
						<tr><th>Combat Round</th><th>0</th><th>Initiative</th></tr>
					</table>
				</div> 
				<br/>
				<input id="tokens1check" type="checkbox" checked onclick="toggleTokens();">Show token overlay</input>
				<div id="tokenlist">
				</div>
				<div id="messageDiv" style="margin-top: 20px;">
				</div>
				<input id="debugcheck" type="checkbox">Keep message history</input>
			</div>
		</section>
		{{/webcam}}
		{{#sheet1}}
		<section id="tab_sheet" style="display:none; font-size:62.5%;" class="tab" name="Sheet 1"></section>
		{{/sheet1}}
		{{#content}}
		<section id="tab_cast" style="display:none;" class="tab" name="Cast" saveurl="/spells">
			<div>
				<h3>Memorised</h3>
				<div id="spellList" class="scrollable" button="btnSpells" style="width:300px">
					{{#spells}}
					<div class="selectable">{{{html}}}</div>
					{{/spells}}
				</div>
				<br><input type="button" id="btnSpells" value="Cast" onclick="castSpell()"/>
				<input type="button" value="Rest" onclick="rest()"/>
			</div>
		</section>
		{{/content}}
		{{{content}}}
	</div>
</body>
</body>
</html>
